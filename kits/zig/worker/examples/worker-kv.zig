const std = @import("std");
const io = std.io;
const http = std.http;
const worker = @import("worker");

var arena = std.heap.ArenaAllocator.init(std.heap.page_allocator);
const allocator = arena.allocator();

// Not working with *http.Server.Response
// fn cool(resp: *http.Server.Response, r: *http.Client.Request) void {
fn requestFn(resp: *worker.Response, r: *worker.Request) void {
    _ = r;

    // var cache = r.Context
    
    var counterNum: u32 = 0;

    const s =
        \\<!DOCTYPE html>
        \\<head>
        \\<title>
        \\Wasm Workers Server - KV example</title>
        \\<meta name="viewport" content="width=device-width,initial-scale=1">
        \\<meta charset="UTF-8">
        \\</head>
        \\<body>
        \\<h1>Key / Value store in Zig</h1>
        \\<p>Counter: {d}</p>
        \\<p>This page was generated by a Zig⚡️ file running in WebAssembly.</p>
        \\</body>
    ;

    var body = std.fmt.allocPrint(allocator, s, .{ counterNum }) catch undefined; // add useragent

    _ = &resp.headers.append("x-generated-by", "wasm-workers-server");
    _ = &resp.writeAll(body);
}

pub fn main() !void {
    worker.ServeFunc(requestFn);
}
