// Generated by `wit-bindgen` 0.6.0. DO NOT EDIT!
#ifndef __BINDINGS_BINDINGS_H
#define __BINDINGS_BINDINGS_H
#ifdef __cplusplus
extern "C" {
#endif

#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#include <stdbool.h>

typedef struct {
  char*ptr;
  size_t len;
} bindings_string_t;

typedef bindings_string_t http_types_uri_t;

typedef uint16_t http_types_http_status_t;

typedef struct {
  bindings_string_t f0;
  bindings_string_t f1;
} http_types_http_param_t;

typedef struct {
  http_types_http_param_t *ptr;
  size_t len;
} http_types_http_params_t;

typedef uint8_t http_types_http_method_t;

#define HTTP_TYPES_HTTP_METHOD_GET 0
#define HTTP_TYPES_HTTP_METHOD_POST 1
#define HTTP_TYPES_HTTP_METHOD_PUT 2
#define HTTP_TYPES_HTTP_METHOD_PATCH 3
#define HTTP_TYPES_HTTP_METHOD_DELETE 4
#define HTTP_TYPES_HTTP_METHOD_OPTIONS 5
#define HTTP_TYPES_HTTP_METHOD_HEAD 6

typedef struct {
  bindings_string_t f0;
  bindings_string_t f1;
} http_types_http_header_t;

typedef struct {
  http_types_http_header_t *ptr;
  size_t len;
} http_types_http_headers_t;

typedef uint8_t http_types_http_error_t;

#define HTTP_TYPES_HTTP_ERROR_INVALID_REQUEST 0
#define HTTP_TYPES_HTTP_ERROR_INVALID_REQUEST_BODY 1
#define HTTP_TYPES_HTTP_ERROR_INVALID_RESPONSE_BODY 2
#define HTTP_TYPES_HTTP_ERROR_NOT_ALLOWED 3
#define HTTP_TYPES_HTTP_ERROR_INTERNAL_ERROR 4
#define HTTP_TYPES_HTTP_ERROR_TIMEOUT 5
#define HTTP_TYPES_HTTP_ERROR_REDIRECT_LOOP 6

typedef struct {
  http_types_http_error_t error;
  bindings_string_t message;
} http_types_http_request_error_t;

typedef struct {
  uint8_t *ptr;
  size_t len;
} http_types_http_body_t;

typedef struct {
  bool is_some;
  http_types_http_body_t val;
} bindings_option_http_body_t;

typedef struct {
  bindings_option_http_body_t body;
  http_types_http_headers_t headers;
  http_types_http_status_t status;
} http_types_http_response_t;

typedef struct {
  bindings_option_http_body_t body;
  http_types_http_headers_t headers;
  http_types_http_method_t method;
  http_types_http_params_t params;
  http_types_uri_t uri;
} http_types_http_request_t;

typedef http_types_http_request_t http_interface_http_request_t;

typedef http_types_http_response_t http_interface_http_response_t;

typedef http_types_http_request_error_t http_interface_http_request_error_t;

typedef struct {
  bool is_err;
  union {
    http_interface_http_response_t ok;
    http_interface_http_request_error_t err;
  } val;
} bindings_result_http_response_http_request_error_t;

// Imported Functions from `http`
void http_send_http_request(http_interface_http_request_t *request, bindings_result_http_response_http_request_error_t *ret);

// Helper Functions

void http_types_uri_free(http_types_uri_t *ptr);
void http_types_http_param_free(http_types_http_param_t *ptr);
void http_types_http_params_free(http_types_http_params_t *ptr);
void http_types_http_header_free(http_types_http_header_t *ptr);
void http_types_http_headers_free(http_types_http_headers_t *ptr);
void http_types_http_request_error_free(http_types_http_request_error_t *ptr);
void http_types_http_body_free(http_types_http_body_t *ptr);
void bindings_option_http_body_free(bindings_option_http_body_t *ptr);
void http_types_http_response_free(http_types_http_response_t *ptr);
void http_types_http_request_free(http_types_http_request_t *ptr);
void http_interface_http_request_free(http_interface_http_request_t *ptr);
void http_interface_http_response_free(http_interface_http_response_t *ptr);
void http_interface_http_request_error_free(http_interface_http_request_error_t *ptr);
void bindings_result_http_response_http_request_error_free(bindings_result_http_response_http_request_error_t *ptr);
void bindings_string_set(bindings_string_t *ret, const char*s);
void bindings_string_dup(bindings_string_t *ret, const char*s);
void bindings_string_free(bindings_string_t *ret);

#ifdef __cplusplus
}
#endif
#endif
